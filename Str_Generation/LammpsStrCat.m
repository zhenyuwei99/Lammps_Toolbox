function [varargout] = LammpsStrCat(varargin)
%% Description
%
% *Command*:
% data_sum = LammpsStrCat(data01,data02,...);
%
% *Input*:
% data_*    :   structure generated by function LammpsStrGenerate

%% Reading Input

num_data    =   nargin;

for id = 1 : num_data
    data{id} = varargin{id};
end

%% Setting Varibales

para_list   =   split(['pair bond angle']);
num_paras   =   length(para_list);

%% Rearranging Data

data_sum    =   data{1};

for id = 2 : num_data
    flag_atom           =   0;
    temp_num_atoms_pre  =   data_sum.num_atoms;
    %% Box Info
    
    data_sum.box_size(:,1) = min( cat(2,data_sum.box_size(:,1),data{id}.box_size(:,1)),[],2);
    data_sum.box_size(:,2) = max( cat(2,data_sum.box_size(:,2),data{id}.box_size(:,2)),[],2);
    try
        data_sum.box_tilt = max(cat(2,data_sum.box_tilt,data{id}.box_tilt),[],2);
    end
    
    %% Judge Atom Type
    
    % Determing whether new type of atom is added
    try
        data_sum.atom_name;
        for atom = 1 : data{id}.num_atom_types
            flag_atom = flag_atom + sum(data{id}.atom_name(atom) == data_sum.atom_name);
            if flag_atom
                pos = find(data{id}.data_atom(:,3) == atom);
                data{id}.data_atom(pos,3) = find(data{id}.atom_name(atom) == data_sum.atom_name);
            end
        end
        if flag_atom == data{id}.num_atom_types
            flag_atom = 0;                      % Atom type(s) is(are) the same
        else
            flag_atom = 1;                      % Atom type(s) is(are) different
        end
    catch
        flag_atom = 1;
    end

    %% Para Info
    
    if flag_atom
        try                         % In case one of data will have para
            data{id}.para;
            for para = 1 : num_paras
                try
                    command = ['data_sum.para.',para_list{para},'_coeff;'];
                    eval(command);
                    command = ['data_sum.para.',para_list{para},'_coeff = cat(1,data_sum.para.',para_list{para},'_coeff,data{id}.para.',para_list{para},'_coeff);'];
                    eval(command);
                catch
                    command = ['data_sum.para.',para_list{para},'_coeff=data{id}.para.',para_list{para},'_coeff;'];
                    eval(command);
                end
            end
        end
    end
    
    %% Atom Info
    
    data{id}.data_atom(:,1:2)   =   data{id}.data_atom(:,1:2) + max(data_sum.data_atom(:,1:2),[],1);
    data_sum.num_atoms          =   data_sum.num_atoms + data{id}.num_atoms;
    if flag_atom
        try
            data{id}.atom_mass;
            try
                data_sum.atom_mass;
                data_sum.atom_mass = cat(2,data_sum.atom_mass,data{id}.atom_mass);
            catch
                data_sum.atom_mass = data{id}.atom_mass;
            end
        end
        try
            data{id}.atom_name;
            try
                data_sum.atom_name;
                data_sum.atom_name = cat(2,data_sum.atom_name,data{id}.atom_name);
            catch
                data_sum.atom_name = data{id}.atom_name;
            end
        end     
        data{id}.data_atom(:,3)   =   data{id}.data_atom(:,3) + max(data_sum.data_atom(:,3),[],1);
        data_sum.num_atom_types     =   data_sum.num_atom_types + data{id}.num_atom_types;
    end
    data_sum.data_atom          =   cat(1,data_sum.data_atom,data{id}.data_atom);

    %% Bond Info
    try
        data{id}.data_bond;
        try 
            data_sum.data_bond;
            temp = data{id}.data_bond;
            temp(:,1) = temp(:,1) + data_sum.num_bonds;
            if flag_atom
                temp(:,2) = temp(:,2) + data_sum.num_bond_types;
                data_sum.num_bond_types = data_sum.num_bond_types + data{id}.num_bond_types;
            end
            temp(:,3:4) = temp(:,3:4) + temp_num_atoms_pre;
            data_sum.data_bond = cat(1,data_sum.data_bond,temp);
            data_sum.num_bonds = data_sum.num_bonds + data{id}.num_bonds;  
        catch
            data{id}.data_bond(:,3:4) = data{id}.data_bond(:,3:4) + temp_num_atoms_pre;
            data_sum.data_bond = data{id}.data_bond;
            data_sum.num_bonds = data{id}.num_bonds;
            data_sum.num_bond_types = data{id}.num_bond_types;
        end
    end
    
    %% Angle Info
    
    try
        data{id}.data_angle;
        try 
            data_sum.data_angle;
            temp = data{id}.data_angle;
            temp(:,1) = temp(:,1) + data_sum.num_angles;
            if flag_atom
                temp(:,2) = temp(:,2) + data_sum.num_angle_types;
                data_sum.num_angle_types = data_sum.num_angle_types + data{id}.num_angle_types;
            end
            temp(:,3:5) = temp(:,3:5) + temp_num_atoms_pre;
            data_sum.data_angle = cat(1,data_sum.data_angle,temp);
            data_sum.num_angles = data_sum.num_angles + data{id}.num_angles;
        catch
            data{id}.data_angle(:,3:5) = data{id}.data_angle(:,3:5) + temp_num_atoms_pre;
            data_sum.data_angle = data{id}.data_angle;
            data_sum.num_angles = data{id}.num_angles;
            data_sum.num_angle_types = data{id}.num_angle_types;
        end
    end
    
end

%% ---------------------Output-----------------------------

varargout{1}        =   data_sum;